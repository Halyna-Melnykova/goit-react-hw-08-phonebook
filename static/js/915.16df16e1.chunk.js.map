{"version":3,"file":"static/js/915.16df16e1.chunk.js","mappings":"sSAkFA,EAxEqB,WACnB,OAA0BA,EAAAA,EAAAA,UAAS,CACjCC,KAAM,GACNC,MAAO,GACPC,SAAU,KAHZ,eAAOC,EAAP,KAAcC,EAAd,KAKQJ,EAA0BG,EAA1BH,KAAMC,EAAoBE,EAApBF,MAAOC,EAAaC,EAAbD,SACfG,GAASC,EAAAA,EAAAA,IAAYC,EAAAA,GACrBC,GAAWC,EAAAA,EAAAA,MAEXC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,cAAtBZ,EAAR,EAAQA,KAAMa,EAAd,EAAcA,MACdT,GAAS,kBAAKD,GAAN,cAAcH,EAAOa,IAC9B,EAQKC,EAAQ,WACZV,EAAS,CAAEJ,KAAM,GAAIC,MAAO,GAAIC,SAAU,IAC3C,EAED,OAAIG,GACK,SAAC,KAAD,CAAUU,GAAG,eAIpB,UAACC,EAAA,EAAD,CAAMC,SAfa,SAAAN,GACnBA,EAAMO,iBACNV,GAASW,EAAAA,EAAAA,IAAOhB,IAChBW,GACD,EAWC,WACE,UAACE,EAAA,QAAD,CAAYI,UAAU,OAAOC,UAAU,gBAAvC,WACE,SAACL,EAAA,QAAD,oBACA,SAACA,EAAA,UAAD,CACEhB,KAAK,OACLa,MAAOb,EACPsB,SAAUZ,EACVa,KAAK,OACLC,YAAY,mBAGhB,UAACR,EAAA,QAAD,CAAYI,UAAU,OAAOC,UAAU,iBAAvC,WACE,SAACL,EAAA,QAAD,6BACA,SAACA,EAAA,UAAD,CACEhB,KAAK,QACLa,MAAOZ,EACPqB,SAAUZ,EACVa,KAAK,QACLC,YAAY,oBAGhB,UAACR,EAAA,QAAD,CAAYI,UAAU,OAAOC,UAAU,oBAAvC,WACE,SAACL,EAAA,QAAD,wBACA,SAACA,EAAA,UAAD,CACEhB,KAAK,WACLa,MAAOX,EACPoB,SAAUZ,EACVa,KAAK,WACLC,YAAY,cAEd,SAACR,EAAA,OAAD,CAAWS,GAAG,oBAAoBC,OAAK,EAAvC,qJAKF,SAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUL,KAAK,SAA/B,wBAKL,ECtED,EARiB,WACf,OACE,2BACE,SAAC,EAAD,KAGL,C","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register/Register.jsx"],"sourcesContent":["import Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\n\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Navigate } from 'react-router-dom';\nimport { isLogin } from '../../redux/auth/auth-selectors';\nimport { signup } from 'redux/auth/auth-operations';\n// import s from './RegisterForm.module.css';\n\nconst RegisterForm = () => {\n  const [state, setState] = useState({\n    name: '',\n    email: '',\n    password: '',\n  });\n  const { name, email, password } = state;\n  const isAuth = useSelector(isLogin);\n  const dispatch = useDispatch();\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    setState({ ...state, [name]: value });\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    dispatch(signup(state));\n    reset();\n  };\n\n  const reset = () => {\n    setState({ name: '', email: '', password: '' });\n  };\n\n  if (isAuth) {\n    return <Navigate to=\"/contacts\" />;\n  }\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicName\">\n        <Form.Label>Name</Form.Label>\n        <Form.Control\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          type=\"text\"\n          placeholder=\"Enter name\"\n        />\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicEmail\">\n        <Form.Label>Email address</Form.Label>\n        <Form.Control\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n          type=\"email\"\n          placeholder=\"Enter email\"\n        />\n      </Form.Group>\n      <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\n        <Form.Label>Password</Form.Label>\n        <Form.Control\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          type=\"password\"\n          placeholder=\"Password\"\n        />\n        <Form.Text id=\"passwordHelpBlock\" muted>\n          Your password must be 8-20 characters long, contain letters and\n          numbers, and must not contain spaces, special characters, or emoji.\n        </Form.Text>\n      </Form.Group>\n      <Button variant=\"primary\" type=\"submit\">\n        Register\n      </Button>\n    </Form>\n  );\n};\n\nexport default RegisterForm;\n","import RegisterForm from 'components/RegisterForm/RegisterForm';\n\nconst Register = () => {\n  return (\n    <main>\n      <RegisterForm />\n    </main>\n  );\n};\n\nexport default Register;\n"],"names":["useState","name","email","password","state","setState","isAuth","useSelector","isLogin","dispatch","useDispatch","handleChange","event","currentTarget","value","reset","to","Form","onSubmit","preventDefault","signup","className","controlId","onChange","type","placeholder","id","muted","Button","variant"],"sourceRoot":""}